# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/toxiproxy/all/toxiproxy.rbi
#
# toxiproxy-2.0.2

class Toxiproxy
  def assert_response(*args); end
  def create; end
  def destroy; end
  def disable; end
  def down(&block); end
  def downstream(type, attrs = nil); end
  def enable; end
  def enabled; end
  def http; end
  def http_request(request); end
  def initialize(options); end
  def listen; end
  def name; end
  def self.[](query); end
  def self.all; end
  def self.assert_response(response); end
  def self.count(*args, **, &block); end
  def self.create(options); end
  def self.down(*args, **, &block); end
  def self.each(*args, **, &block); end
  def self.ensure_webmock_whitelists_toxiproxy; end
  def self.find(*args, **, &block); end
  def self.find_by_name!(*args); end
  def self.find_by_name(name = nil, &block); end
  def self.grep(*args, **, &block); end
  def self.host=(host); end
  def self.http; end
  def self.http_request(request); end
  def self.length(*args, **, &block); end
  def self.map(*args, **, &block); end
  def self.populate(*proxies); end
  def self.reject(*args, **, &block); end
  def self.reset; end
  def self.reset_http_client!; end
  def self.running?; end
  def self.select(*args, **, &block); end
  def self.size(*args, **, &block); end
  def self.uri; end
  def self.version; end
  def toxic(type, attrs = nil); end
  def toxicate(type, attrs = nil); end
  def toxics; end
  def upstream(type = nil, attrs = nil); end
  extend SingleForwardable
end
class Toxiproxy::Toxic
  def as_json; end
  def attributes; end
  def attributes=(arg0); end
  def destroy; end
  def initialize(attrs); end
  def name; end
  def proxy; end
  def save; end
  def stream; end
  def toxicity; end
  def toxicity=(arg0); end
  def type; end
end
class Toxiproxy::ToxicCollection
  def <<(*args, **, &block); end
  def apply(&block); end
  def downstream(type, attrs = nil); end
  def find(*args, **, &block); end
  def initialize(proxies); end
  def proxies; end
  def toxic(type, attrs = nil); end
  def toxicate(type, attrs = nil); end
  def toxics; end
  def toxics=(arg0); end
  def upstream(type, attrs = nil); end
  extend Forwardable
end
class Toxiproxy::ProxyCollection
  def count(*args, **, &block); end
  def destroy; end
  def disable; end
  def down(&block); end
  def downstream(toxic, attrs = nil); end
  def each(*args, **, &block); end
  def enable; end
  def find(*args, **, &block); end
  def grep(regex); end
  def initialize(collection); end
  def length(*args, **, &block); end
  def map(*args, **, &block); end
  def reject(&block); end
  def select(&block); end
  def size(*args, **, &block); end
  def toxic(toxic, attrs = nil); end
  def toxicate(toxic, attrs = nil); end
  def upstream(toxic, attrs = nil); end
  extend Forwardable
end
class Toxiproxy::NotFound < StandardError
end
class Toxiproxy::ProxyExists < StandardError
end
class Toxiproxy::InvalidToxic < StandardError
end
